# React Workflow Editor with ADFS Authentication & Intelligent OCR Integration

A modern React application featuring a workflow editor with integrated ADFS (Active Directory Federation Services) authentication and intelligent OCR (Optical Character Recognition) processing capabilities with automatic handwritten vs typed text classification.

## 🚀 Features

- **🔐 ADFS Authentication**: Secure login using OpenID Connect protocol
- **⚡ Workflow Editor**: Interactive workflow builder with React Flow
- **🤖 Smart OCR Processing**: Automatic classification of handwritten vs typed text with intelligent routing
- **📝 Text Classification**: AI-powered analysis using Tesseract.js OCR confidence scoring
- **📄 Dual OCR Endpoints**: Separate processing for handwritten and typed text optimization
- **📁 File Management**: Upload images, preview them, and process with appropriate OCR engine
- **🎨 Modern UI**: Clean, dark-themed interface with smooth animations and real-time status indicators
- **🔄 Hot Reload**: Development server with automatic page refresh
- **📦 TypeScript**: Full type safety throughout the application
- **🗃️ State Management**: MobX for reactive state management

## 🛠️ Technology Stack

- **Frontend Framework**: [`React 18`](https://reactjs.org/) - Modern React with hooks
- **State Management**: [`MobX`](https://mobx.js.org/) - Reactive state management
- **Authentication**: [`oidc-client-ts`](https://github.com/authts/oidc-client-ts) - OpenID Connect client
- **Workflow Engine**: [`React Flow`](https://reactflow.dev/) - Interactive node-based editor
- **OCR Engine**: [`Tesseract.js`](https://tesseract.projectnaptha.com/) - JavaScript OCR library for text classification
- **Image Processing**: [`Sharp`](https://sharp.pixelplumbing.com/) - High-performance image processing
- **Build System**: [`esbuild`](https://esbuild.github.io/) - Fast JavaScript bundler
- **Backend**: [`Express.js`](https://expressjs.com/) - Web server framework
- **File Processing**: [`multer`](https://github.com/expressjs/multer) - Multipart form data handling
- **Language**: [`TypeScript`](https://www.typescriptlang.org/) - Type-safe JavaScript
- **Testing**: [`Jest`](https://jestjs.io/) - JavaScript testing framework

## 📁 Project Structure

```
├── src/                    # Backend server code
│   ├── server.ts          # Main Express server
│   ├── utils/             # Utility functions
│   │   └── textClassification.ts # AI text classification logic
│   └── routes/            # API routes
│       └── workflowsRouter.ts # OCR API proxy endpoints & classification
├── web/                   # Frontend React application
│   ├── components/        # React components
│   │   └── flow-renderer/ # Workflow editor components
│   │       ├── startNode.tsx         # Smart image upload & classification node
│   │       ├── ocrNode.tsx           # OCR processing node
│   │       ├── endNode.tsx           # Text download node
│   │       └── ImagePreviewPopup.tsx # Image preview modal
│   ├── stores/            # MobX state management
│   │   ├── OcrStore.ts    # OCR processing state with smart routing
│   │   ├── TextClassificationStore.ts # Text classification state
│   │   └── GlobalsStore.ts # Root store
│   ├── oidcConfig.ts     # ADFS authentication config
│   ├── useOidcAuth.ts    # Authentication hook
│   └── App.tsx           # Main React component
├── public/               # Static HTML files
├── dev/                  # Development utilities
└── dist/                 # Production build output
```

## 🔧 Setup & Installation

### Prerequisites

- Node.js (v16 or higher)
- Access to ADFS server
- Valid ADFS application registration
- Docker backend with OCR services running:
  - `localhost:8000/ocr/typed` - Optimized for printed/typed text
  - `localhost:8000/ocr/handwritten` - Optimized for handwritten text

````

### Installation
```bash
# Install dependencies
npm install

# Start development server
npm run startDev
````

### Production Build

```bash
# Build for production
npm run build

# Start production server
npm start
```

## 🔐 ADFS Configuration

### Required ADFS Setup

1. **Application Registration**: Register your app in ADFS Management Console
2. **Client ID**: Obtain from ADFS administrator
3. **Redirect URI**: Configure `http://localhost:5000/adfs1_sign`
4. **SSL Certificate**: Ensure ADFS has valid SSL certificate with proper key usage

### SSL Certificate Requirements

The ADFS server certificate must have:

- ✅ Digital Signature
- ✅ Key Encipherment
- ✅ Server Authentication (Extended Key Usage)

If experiencing SSL errors, generate a proper certificate:

```powershell
# Run on ADFS server as Administrator
$cert = New-SelfSignedCertificate `
    -DnsName "your-adfs-server.domain.com" `
    -CertStoreLocation "cert:\LocalMachine\My" `
    -KeyUsage DigitalSignature, KeyEncipherment `
    -KeyAlgorithm RSA -KeyLength 2048

Set-AdfsSslCertificate -Thumbprint $cert.Thumbprint
Restart-Service adfssrv
```

## 🚦 Usage

### Authentication & Setup

1. **Start Application**: Run `npm run startDev`
2. **Access**: Open http://localhost:5000
3. **Login**: Click "Login with ADFS" to authenticate
4. **Token**: Click "Get Token" to retrieve access token for API calls

### Smart OCR Workflow

1. **Upload Image**: Click the upload button in the Start node to select an image
2. **Preview**: Click on the uploaded file to preview the image in a centered popup
3. **Auto-Classification**: System automatically analyzes the image to determine if text is handwritten or typed
4. **Smart Processing**: Click the play button to start OCR processing with the appropriate engine:
   - 🖨️ **Typed text** → Routes to `/ocr/typed` endpoint (optimized for printed text)
   - ✍️ **Handwritten text** → Routes to `/ocr/handwritten` endpoint (optimized for handwriting)
5. **Review**: View extracted text in the OCR node (editable)
6. **Download**: Use the End node to download extracted text as .txt file

### Intelligent Features

- **AI Text Classification**: Uses Tesseract.js OCR confidence analysis to determine text type
- **Smart Routing**: Automatically selects the best OCR endpoint based on classification
- **Visual Indicators**: Shows classification results with icons (🖨️ typed, ✍️ handwritten)
- **Error Handling**: Robust fallback mechanisms for classification failures

### Workflow Nodes

- **Start Node**: Smart image upload with automatic text classification and processing initiation
- **OCR Node**: Text extraction display with dark theme
- **End Node**: Download extracted text functionality

````

## 📜 Available Scripts

- `npm run startDev` - Start development server with hot reload
- `npm run build` - Build for production
- `npm run start` - Start production server
- `npm test` - Run test suite
- `npm run check` - Run type checking

## 🔌 API Endpoints

### OCR Processing
- `POST /api/workflows/ocr/typed` - Process image optimized for typed/printed text
  - Accepts: `multipart/form-data` with image file
  - Proxies to: `localhost:8000/ocr/typed`
  - Returns: JSON with extracted text and confidence score

- `POST /api/workflows/ocr/handwritten` - Process image optimized for handwritten text
  - Accepts: `multipart/form-data` with image file
  - Proxies to: `localhost:8000/ocr/handwritten`
  - Returns: JSON with array of text lines

### Text Classification
- `POST /api/workflows/text-classification` - Analyze image to classify text type
  - Accepts: `multipart/form-data` with image file
  - Uses: Local Tesseract.js OCR analysis
  - Returns: JSON with classification result
  ```json
  {
    "classification": "handwritten" | "typed",
    "confidence": 85,
    "justification": "high OCR confidence indicates printed text"
  }
````

## 🎨 UI Features

### Visual Design

- **Dark Theme**: Modern dark interface with proper contrast
- **Smart Indicators**: Real-time classification badges with icons (🖨️ typed, ✍️ handwritten)
- **Animations**: Smooth transitions and loading states
- **Responsive**: Works across different screen sizes
- **Interactive**: Real-time feedback and status indicators
- **Text Overflow**: Smart text truncation with ellipsis for long filenames

### File Handling

- **Single Upload**: One image file at a time with automatic classification
- **Format Support**: Common image formats (PNG, JPG, GIF, etc.)
- **Smart Processing**: Automatic routing to appropriate OCR endpoint
- **Download**: Export extracted text as timestamped .txt files
- **Preview**: Visual feedback for uploaded files with click-to-preview functionality

### ADFS Settings

Configure in `web/oidcConfig.ts`:

- Authority: Your ADFS server URL
- Client ID: Application ID from ADFS
- Redirect URI: Authentication callback URL

```

```


## Testing Changes

This is a test modification to verify that gith status correctly detects changes.
The file has been modified locally and should show as modified in gith status.

